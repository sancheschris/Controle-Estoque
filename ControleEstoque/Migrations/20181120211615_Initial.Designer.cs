// <auto-generated />
using System;
using ControleEstoque.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ControleEstoque.Migrations
{
    [DbContext(typeof(StockContext))]
    [Migration("20181120211615_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ControleEstoque.Models.Entities.Cidade", b =>
                {
                    b.Property<int>("CidadeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<int?>("EstadoID");

                    b.Property<string>("Nome");

                    b.Property<int?>("PaisID");

                    b.HasKey("CidadeID");

                    b.HasIndex("EstadoID");

                    b.HasIndex("PaisID");

                    b.ToTable("Cidades");
                });

            modelBuilder.Entity("ControleEstoque.Models.Entities.Estado", b =>
                {
                    b.Property<int>("EstadoID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<string>("Nome");

                    b.Property<int?>("PaisID");

                    b.HasKey("EstadoID");

                    b.HasIndex("PaisID");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("ControleEstoque.Models.Entities.Fornecedor", b =>
                {
                    b.Property<int>("FornecedorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<int>("CEP");

                    b.Property<string>("CNPJ");

                    b.Property<int>("CidadeID");

                    b.Property<int>("EstadoID");

                    b.Property<string>("Logradouro");

                    b.Property<string>("Nome");

                    b.Property<int>("Numero");

                    b.Property<int>("PaisID");

                    b.Property<string>("Telefone");

                    b.HasKey("FornecedorID");

                    b.HasIndex("CidadeID");

                    b.HasIndex("EstadoID");

                    b.HasIndex("PaisID");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("ControleEstoque.Models.Entities.Pais", b =>
                {
                    b.Property<int>("PaisID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<string>("Nome");

                    b.HasKey("PaisID");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("ControleEstoque.Models.Entities.Produto", b =>
                {
                    b.Property<int>("ProdutoID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<string>("CodigoProduto");

                    b.Property<string>("Descricao");

                    b.Property<int?>("FornecedorID");

                    b.Property<int?>("Marca");

                    b.Property<string>("Nome");

                    b.Property<double>("PrecoCusto");

                    b.Property<double>("PrecoVenda");

                    b.Property<int>("Qtd_Estoque");

                    b.Property<int?>("TipoProduto");

                    b.HasKey("ProdutoID");

                    b.HasIndex("FornecedorID");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("ControleEstoque.Models.Entities.Cidade", b =>
                {
                    b.HasOne("ControleEstoque.Models.Entities.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoID");

                    b.HasOne("ControleEstoque.Models.Entities.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisID");
                });

            modelBuilder.Entity("ControleEstoque.Models.Entities.Estado", b =>
                {
                    b.HasOne("ControleEstoque.Models.Entities.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisID");
                });

            modelBuilder.Entity("ControleEstoque.Models.Entities.Fornecedor", b =>
                {
                    b.HasOne("ControleEstoque.Models.Entities.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ControleEstoque.Models.Entities.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ControleEstoque.Models.Entities.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ControleEstoque.Models.Entities.Produto", b =>
                {
                    b.HasOne("ControleEstoque.Models.Entities.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorID");
                });
#pragma warning restore 612, 618
        }
    }
}
